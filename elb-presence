#!/usr/local/bin/python

import argparse
import os
import signal
import sys
import time

from boto.utils import get_instance_metadata
from boto.compat import six
from boto.ec2.elb import connect_to_region


def _convert_key_to_str(key):
    if isinstance(key, six.text_type):
        # the secret key must be bytes and not unicode to work
        #  properly with hmac.new (see http://bugs.python.org/issue5285)
        return str(key)
    return key

def deregister_func(lbname, region, instance_id):
    def handler(*args, **kwargs):
        elb = connect_to_region(region)
        print("Deregistering instance {} from ELB {}".format(instance, lbname))
        elb.deregister_instances(lbname, [instance_id])
        sys.exit(0)
    return handler

def register_instance(lbname, region, instance_id):
    elb = connect_to_region(region)
    print("Registering instance {} to ELB {}".format(instance, lbname))
    instances = elb.register_instances(lbname, [instance_id])
    return(instances)

# Parse arguments or get from ENV
parser = argparse.ArgumentParser(description='Register the local EC2 instance in an ELB')
parser.add_argument('--lbname', metavar='<NAME>', default=os.environ.get('ELB_NAME'),
                    help='Name of AWS ELB that should be used for registration')
parser.add_argument('--region', metavar='<REGION>', default=os.environ.get('AWS_REGION'),
                    help='AWS region in which the ELB resides')
cargs = parser.parse_args()

# Get instance id
metadata = get_instance_metadata(timeout=2.0, num_retries=5,
            data='meta-data/instance-id')
instance = list(metadata.keys())[0]

# Register the Instance
register_instance(cargs.lbname, cargs.region, instance)

# Deregistration Hooks
deregister = deregister_func(cargs.lbname, cargs.region, instance)
signal.signal(signal.SIGTERM, deregister)
signal.signal(signal.SIGINT, deregister)

while True:
    time.sleep(5)
