#!/usr/local/bin/python

import argparse
import os
import signal
import sys
import time

from datetime import datetime
from boto.utils import get_instance_metadata
from boto.compat import six
import boto.ec2.elb


def _convert_key_to_str(key):
    if isinstance(key, six.text_type):
        # the secret key must be bytes and not unicode to work
        #  properly with hmac.new (see http://bugs.python.org/issue5285)
        return str(key)
    return key

def _get_iam_credentials():
    creds = dict()
    # Lets use IAM Credentials
    metadata = get_instance_metadata(
                timeout=2.0, num_retries=5,
                data='meta-data/iam/security-credentials/')
    if metadata:
        # I'm assuming there's only one role on the instance profile.
        security = list(metadata.values())[0]
        creds['access_key'] = security['AccessKeyId']
        creds['secret_key'] = _convert_key_to_str(security['SecretAccessKey'])
        creds['security_token'] = security['Token']
        expires_at = security['Expiration']
        creds['credential_expiry_time'] = datetime.strptime(
            expires_at, "%Y-%m-%dT%H:%M:%SZ")
        boto.log.debug("Retrieved credentials will expire in %s at: %s",
                       creds['credential_expiry_time'] - datetime.now(), expires_at)
        return(creds)
    else:
        print("No security credentials available.")
        sys.exit(1)

def deregister_func(lbname, instance):
    def handler(*args, **kwargs):
        print("Deregistering instance {} from ELB {}".format(instance, lbname))
        conn.deregister_instances(lbname, [instance])
        sys.exit(0)
    return handler


parser = argparse.ArgumentParser(description='Register the local EC2 instance in an ELB')
parser.add_argument('--lbname', metavar='<NAME>', default=os.environ.get('ELB_NAME'),
                    help='Name of AWS ELB that should be used for registration')
parser.add_argument('--region', metavar='<REGION>', default=os.environ.get('AWS_REGION'),
                    help='AWS region in which the ELB resides')
args = parser.parse_args()

creds = _get_iam_credentials()

conn = boto.ec2.elb.connect_to_region(args.region,
                                      aws_access_key_id=creds['access_key'],
                                      aws_secret_access_key=args['secret_key'])

metadata = get_instance_metadata(timeout=2.0, num_retries=5,
            data='meta-data/instance-id')
instance = list(metadata.keys())[0]

print("Registering instance {} to ELB {}".format(instance, args.lbname))
conn.register_instances(args.lbname, [instance])

deregister = deregister_func(args.lbname, instance)
signal.signal(signal.SIGTERM, deregister)
signal.signal(signal.SIGINT, deregister)

while True:
    time.sleep(5)
